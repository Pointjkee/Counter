{"version":3,"sources":["Button.tsx","Counter.tsx","Input.tsx","localStorage.tsx","reducers/counterReducer.ts","reducers/setButtonReducer.ts","reducers/disableAcceptReducer.ts","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","Counter.module.css","button.module.css"],"names":["Button","props","title","className","styles","main","button1","onClick","inc","reset","set","disabled","disableInc","disableReset","disableAccept","Counter","i","disable","red","type","value","counter","Input","React","memo","useState","setValue","newValue","style","width","height","margin","borderRadius","onChange","e","currentTarget","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","INC_ACTION","RES_ACTION","SET_MAX","SET_MIN","initialState","min","max","resetAC","setMax","setMin","NEW_VALUE_MAX","NEW_VALUE_MIN","valueMax","valueMin","DISABLE_INC","DISABLE_RESET","ACCEPT","accept","disableIncAC","disableResetAC","acceptAC","App","useSelector","setButtonMin","setButton","setButtonMax","dispatch","useDispatch","saveMax","useCallback","saveMin","useEffect","buttonInc","incAC","buttonRes","newValueMax","newValueMaxAC","newValueMin","newValueMinAC","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.af457245.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './button.module.css'\r\nimport {titleType} from \"./App\";\r\n\r\ntype propsButtonType = {\r\n    inc?: () => void\r\n    reset?: () => void\r\n    set?: () => void\r\n    disableInc?: boolean\r\n    disableReset?: boolean\r\n    disableAccept?:boolean\r\n    title: titleType\r\n    onClick?: () => void\r\n}\r\n\r\nexport const Button = (props: propsButtonType) => {\r\n    const inc = (title: titleType) => {\r\n        if (title === 'INC') {\r\n            return props.inc\r\n        }\r\n        if (title === 'RESET') {\r\n            return props.reset\r\n        }\r\n        if (title === 'SET') {\r\n            if (props.onClick) {\r\n                props.onClick()\r\n            }\r\n            return props.set\r\n        }\r\n    }\r\n    const disable = () => {\r\n     return    !!(props.disableInc || props.disableReset || props.disableAccept)\r\n    }\r\n\r\n    return (\r\n        <span className={styles.main}>\r\n            <button\r\n                className={styles.button1}\r\n                onClick={inc(props.title)}\r\n                disabled={disable()}>\r\n                {props.title}\r\n            </button>\r\n\r\n        </span>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from './Counter.module.css'\r\n\r\ntype propsType = {\r\n    counter: number\r\n    disable?: boolean\r\n}\r\n\r\nexport const Counter = (props: propsType) => {\r\n    return (\r\n        <div className={styles.i + ' ' + styles.main}>\r\n            <input className={props.disable ? styles.red : ''} type=\"number\" value={props.counter}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype InputPropsType = {\r\n    title: string\r\n    newValue: (value: number) => void\r\n    value: number\r\n}\r\n\r\nexport const Input = React.memo ((props: InputPropsType) => {\r\n    const [value, setValue] = useState<number>(props.value)\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(+e.currentTarget.value)\r\n    }\r\n    if (props.newValue) {\r\n        props.newValue(value)\r\n    }\r\n    return (\r\n        <div>\r\n            {props.title}\r\n            <input\r\n                type=\"number\"\r\n                style={{width: 40, height: 20, margin: 5, borderRadius: 8}}\r\n                onChange={changeValue}\r\n                value={value}\r\n            />\r\n        </div>\r\n    )\r\n})","\r\n// вот вам функция для сохранения объектов в память браузера\r\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\r\nexport function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state)\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    let state = defaultState\r\n    const stateAsString = localStorage.getItem(key)\r\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\r\n    return state\r\n}","const INC_ACTION = 'INC_ACTION'\r\nconst RES_ACTION = 'RES_ACTION'\r\nconst SET_MAX = 'SET_MAX'\r\nconst SET_MIN = 'SET_MIN'\r\n\r\n\r\nexport type ActionType = buttonIncACType | resetACType | setMaxACType | setMinACType\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n    min: 0,\r\n    max: 5,\r\n}\r\n\r\nexport type stateType = {\r\n    counter: number,\r\n    min: number,\r\n    max: number,\r\n}\r\n\r\nexport const counterReducer = (state: stateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case INC_ACTION: {\r\n            return {...state, counter: action.counter + 1}\r\n        }\r\n        case RES_ACTION: {\r\n            return {...state, counter: action.min}\r\n        }\r\n        case SET_MAX: {\r\n            return {...state, max: action.max}\r\n        }\r\n        case SET_MIN: {\r\n            return {...state, min: action.min}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport type buttonIncACType = {\r\n    type: 'INC_ACTION',\r\n    counter: number,\r\n}\r\nexport const incAC = (counter: number): buttonIncACType => {\r\n    return {type: INC_ACTION, counter}\r\n}\r\nexport type resetACType = {\r\n    type: 'RES_ACTION',\r\n    min: number,\r\n}\r\nexport const resetAC = (min: number): resetACType => {\r\n    return {type: RES_ACTION, min}\r\n}\r\nexport type setMaxACType = {\r\n    type: 'SET_MAX',\r\n    max: number,\r\n}\r\nexport const setMax = (max: number): setMaxACType => {\r\n    return {type: SET_MAX, max}\r\n}\r\nexport type setMinACType = {\r\n    type: 'SET_MIN',\r\n    min: number,\r\n}\r\nexport const setMin = (min: number): setMinACType => {\r\n    return {type: SET_MIN, min}\r\n}","const NEW_VALUE_MAX = 'NEW_VALUE_MAX'\r\nconst NEW_VALUE_MIN = 'NEW_VALUE_MIN'\r\n\r\nexport type ActionType = newValueMinACType | newValueMaxACType\r\n\r\nconst initialState = {\r\n    valueMax:0,\r\n    valueMin:0,\r\n}\r\n\r\n\r\nexport type stateType = {\r\n  valueMax:number,\r\n  valueMin:number,\r\n}\r\n\r\nexport const setButtonReducer = (state: stateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case NEW_VALUE_MIN:{\r\n            return {...state, valueMin:action.value}\r\n        }\r\n        case NEW_VALUE_MAX: {\r\n            return {...state, valueMax:action.value}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\ntype newValueMinACType = {\r\n    type: 'NEW_VALUE_MIN',\r\n    value:number,\r\n}\r\nexport const newValueMinAC = (value:number):newValueMinACType => {\r\n    return {type:NEW_VALUE_MIN, value}\r\n}\r\ntype newValueMaxACType = {\r\n    type: 'NEW_VALUE_MAX',\r\n    value:number,\r\n}\r\nexport const newValueMaxAC = (value:number):newValueMaxACType => {\r\n    return {type:NEW_VALUE_MAX, value}\r\n}\r\n\r\n","const DISABLE_INC = 'DISABLE_INC'\r\nconst DISABLE_RESET = 'DISABLE_RESET'\r\nconst ACCEPT = 'ACCEPT'\r\n\r\nexport type ActionType = disableIncACType | disableResetACType | acceptACType\r\nconst initialState = {\r\n    disableInc: false,\r\n    disableReset: false,\r\n    accept: false\r\n}\r\nexport type stateType = {\r\n    disableInc: boolean,\r\n    disableReset: boolean,\r\n    accept: boolean\r\n}\r\n\r\nexport const disableAcceptReducer = (state: stateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case DISABLE_INC: {\r\n            return {...state, disableInc: action.disable}\r\n        }\r\n        case DISABLE_RESET: {\r\n            return {...state, disableReset: action.disable}\r\n        }\r\n        case ACCEPT: {\r\n            return {...state, accept: action.accept}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\ntype disableIncACType = {\r\n    type: 'DISABLE_INC',\r\n    disable: boolean\r\n}\r\nexport const disableIncAC = (disable: boolean): disableIncACType => {\r\n    return {type: DISABLE_INC, disable}\r\n}\r\ntype disableResetACType = {\r\n    type: 'DISABLE_RESET',\r\n    disable: boolean\r\n}\r\nexport const disableResetAC = (disable: boolean): disableResetACType => {\r\n    return {type: DISABLE_RESET, disable}\r\n}\r\ntype acceptACType = {\r\n    type: 'ACCEPT',\r\n    accept: boolean\r\n}\r\nexport const acceptAC = (accept: boolean): acceptACType => {\r\n    return {type: ACCEPT, accept}\r\n}","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {Button} from './Button';\nimport {Counter} from './Counter';\nimport {Input} from './Input';\nimport {restoreState, saveState} from \"./localStorage\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"./store/store\";\nimport {incAC, resetAC, setMax, setMin} from './reducers/counterReducer';\nimport {newValueMaxAC, newValueMinAC} from './reducers/setButtonReducer';\nimport {acceptAC, disableIncAC, disableResetAC} from \"./reducers/disableAcceptReducer\";\n\n//60108\nexport type titleType = 'INC' | 'RESET' | 'SET'\n\nfunction App() {\n    const counter = useSelector<AppStoreType, number>(state => state.counter.counter)\n    const min = useSelector<AppStoreType, number>(state => state.counter.min)\n    const max = useSelector<AppStoreType, number>(state => state.counter.max)\n    const setButtonMin = useSelector<AppStoreType, number>(state => state.setButton.valueMin)\n    const setButtonMax = useSelector<AppStoreType, number>(state => state.setButton.valueMax)\n    const disableInc = useSelector<AppStoreType, boolean>(state => state.disableAccept.disableInc)\n    const disableReset = useSelector<AppStoreType, boolean>(state => state.disableAccept.disableReset)\n    const accept = useSelector<AppStoreType, boolean>(state => state.disableAccept.accept)\n    const dispatch = useDispatch()\n\n    const saveMax =  useCallback((max: number) => {\n        saveState<number>('max', max)\n    },[max])\n    const saveMin = useCallback((min: number) => {\n        saveState<number>('min', min)\n    },[min])\n    useEffect(() => {\n        dispatch(setMax(restoreState('max', max)))\n        dispatch(setMin(restoreState('min', min)))\n        dispatch(resetAC(restoreState('min', min)))\n    }, [])\n    const buttonInc = useCallback(() => {\n        dispatch(incAC(counter))\n    }, [counter])\n    const buttonRes = useCallback(() => {\n        dispatch(resetAC(setButtonMin))\n    }, [setButtonMin])\n    const newValueMax = useCallback((value: number) => {\n        dispatch(newValueMaxAC(value))\n        counter >= max ? dispatch(disableIncAC(true)) : dispatch(disableIncAC(false))\n        value !== max ? dispatch(acceptAC(true)) : dispatch(acceptAC(false))\n    }, [counter, max])\n\n    const newValueMin = useCallback((value: number) => {\n        dispatch(newValueMinAC(value))\n        counter === min ? dispatch(disableResetAC(true)) : dispatch(disableResetAC(false))\n        value !== min ? dispatch(acceptAC(true)) : dispatch(acceptAC(false))\n    }, [counter, min])\n\n    const buttonSet = () => {\n        dispatch(setMax(setButtonMax))\n        dispatch(setMin(setButtonMin))\n        dispatch(resetAC(setButtonMin))\n        saveMax(setButtonMax)\n        saveMin(setButtonMin)\n    }\n    let error = false\n    if (setButtonMin >= setButtonMax) {\n        error = true\n    }\n    if (setButtonMin < 0 || counter < 0) {\n        error = true\n    }\n    return (\n        <div>\n            <div className=\"App\">\n                {error\n                &&\n                <div className={'error'}> Incorrect value!</div>\n                ||\n                <div>\n                    {accept && <div className={'error'}> Press SET</div> ||\n                    <div>\n                        <Counter counter={counter} disable={disableInc}/>\n                        <Button title={'INC'} inc={buttonInc} disableInc={disableInc}/>\n                        <Button title={'RESET'} reset={buttonRes} disableReset={disableReset}/>\n                    </div>}\n                </div>}\n            </div>\n            <div className=\"App\">\n                <Input title={'Max value'} newValue={newValueMax} value={restoreState('max', max)}/>\n                <Input title={'Min value'} newValue={newValueMin} value={restoreState('min', min)}/>\n                <Button title={'SET'} set={buttonSet} disableAccept={error}  />\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {counterReducer} from \"../reducers/counterReducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {setButtonReducer} from \"../reducers/setButtonReducer\";\r\nimport { disableAcceptReducer } from \"../reducers/disableAcceptReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n counter: counterReducer,\r\n setButton: setButtonReducer,\r\n disableAccept:disableAcceptReducer,\r\n})\r\nconst store = createStore(reducers)\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for dev","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from  \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n       <Provider store={store}>\n           <App />\n       </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"i\":\"Counter_i__SzZy3\",\"red\":\"Counter_red__3imgj\",\"main\":\"Counter_main__k3k8L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"button_main__vIHiy\",\"button1\":\"button_button1__34QUY\",\"button2\":\"button_button2__2G3z5\"};"],"sourceRoot":""}